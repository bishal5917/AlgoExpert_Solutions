
 
 
Chapter
-
3
 
Programming with 8086
 
microprocessor
 
 
Internal Architecture and Features of 8086 Microprocessor
 
 
 
 
Fig: Internal Block Diagram of 8086 Microprocessor
 
 
            
Features of 8086 microprocessor
 
-
 
Intel 8086 is a widely used 16 bit microprocessor
.
 
-
 
The 8086 can directly address 1MB of memory.
 
-
 
The inte
rnal architecture of the 8086 microprocessor
 
is an example of register based 
microprocessor 
and it uses segmented memory.
 
-
 
I
t
 
pre
-
fetches up to 6 instruction byte
s
 
from the memory and queues them in ord
er to 
speed up the instruction execution.
 
Microprocessors  
    
                    
                       
Chapter 
3
 
: Programming with 808
6
 
Microproces
sor
 
 
Compiled by: Er. Hari Aryal             Email: haryal4@gmail.com           
    
                   
Reference:
 
Peter Abel
 
| 
 
2
 
 
-
 
It has data bus of width 16 bits and address bus of width 20 bits. So it always accesses a 
16 bit word to or from memory.
 
-
 
The 8086 microprocessor
 
is divided internally into two separate units
 
which are Bus 
interfac
e unit (BIU) and the execution unit (EU)
.
 
-
 
The BIU fetches instructions, reads operands and write results.
 
-
 
The EU executes instructions that have already been fetched by BIU so that instructions 
fetch
 
overlaps with execution.
 
-
 
A 16 bit ALU in the EU maintain
s the MP status and control flags, manipulates general 
register and instruction operands.
 
 
Bus Interface Unit(BIU)
 
and its Components
 
The BIU sends out address
es
, fetches instructions from memory reads data from 
memory or ports and writes data to memory or
 
port
s
. So it handles all transfers of data 
and address on the buses for EU. It has main 2 parts instruction queue and segment 
register
s.
 
-
 
The BIU can store up to 6 bytes of instructions with FIFO (First in First Out) manner in a 
register set calle
d a queue
. When EU i
s ready for next instruction, it simply reads the 
instruction from the queue in the BIU. This is done in order to speed up program 
execution by overlapping instr
uction fetch with execution. This mechanism is known as 
pipelining.
 
-
 
The BIU contains
 
a dedicated address, which is used to produce 20 bit address. Four 
segment register
s
 
in the BIU are used to hold the upper 16 bits of the starting address of 
four memory segments that the 8086 is working at a particular time. These are code 
segment, data 
segment, stack segment an

 
memory is 
divided into segments up to 64KB each.
 
 
-
 
Code segment register and instruction pointer
 
(IP)
: 
The CS
 
conta
ins the base or sta
rt of 
the current code segment. 
The IP contains the distance or of
fset from this address to 
the next instruction byte to be fetched. Code segment address plus an offset value in 
the IP indicates the address of an instruction to be fetched for execution.
 
 
 
-
 
Data Segment
 
Data segment 
Contains the starting address of a program

use this address to locate data. This address plus an offset value in an instruction, causes 
a reference to a specific byte location in the data segment.
 
 
-
 
Stack segment (SS) and Stack P
ointer (SP)
 
Stack segment 
Contains the sta

segment address plus an offset value in the stack pointer indicates the current word in 
the stack being addressed.
 
 
 
Microprocessors  
    
                    
                       
Chapter 
3
 
: Programming with 808
6
 
Microproces
sor
 
 
Compiled by: Er. Hari Aryal             Email: haryal4@gmail.com           
    
                   
Reference:
 
Peter Abel
 
| 
 
3
 
 
-
 
Extra Segment(ES)
 
It is 
used by some string
 
(character data)
 
to handle memory addressing. Th
e string 
instructions always use the ES and destination index (DI) to determine 20 bit physical 
address.
 
 
Execution Unit (EU)
 
The EU
 
decodes and executes the instructions. The EU contains arithmetic and logic 
(ALU), a control unit, and a number of register
s
. These features provide for execution of 
instructions and arithmetic and logical operations. It has nine 16 bit registers which 
are 
AX, BX, CX, DX, SP
, BP
,
 
SI, DI and flag. First four can be used as 8 bit register (AH, Al, BH, 
BL, CH, DH, DL)
 
 
-
 
AX Register
 
AX register is called 16 bit accumulator and AL is called 8 bit accumulator. The I/O 
(IN or 
OUT) instructions always 
use the AX or AL for inputting/Outputting 16 or 8 bit data from 
or to I/O port. 
 
 
-
 
BX Register
 
BX is known as
 
the base register since it is t
he only general purpose register that can be 
used as an index to extend addressing. The BX register is similar to the 8085

 
H, L 
register. BX can also be combined with DI or SI as C base register for special addressing. 
 
 
-
 
CX register:
 
The CX register is known as
 
the counter register because some instructions such as 
SHIFT, ROTATE and LOOP use the contents of CX as a Counte
r.
 
 
-
 
DX register:
 
The DX register is known as
 
data register. Some I/O operations require its use and 
multiply and divide operations that involve large values assume the use of DX and AX 
together as a pair. DX comprises the rightmost 16 bits of the 32
-
bit EDX
.
 
 
-
 
Stack Pointer (SP) and Base Pointer (BP):
 
Both are used to access data in the stack segment. The SP is used as an offset from the 
current stack segment during e

 
automatically updated (increment/decrement) du
ring execution of a POP and PUSH 
instructions.
 
The BP contains the offset address in the current stack segment. This offset is used by 
instructions utilizing the based addressing mode.
 
 
-
 
Index register:
 
The two index registers SI (Source index) and DI (Desti
nation Index) are used in indexed 
addressing. The instructions that process data strings use the SI and DI index register 
together with DS and ES respectively, in order to distinguish between the source and 
destination address.
 
Microprocessors  
    
                    
                       
Chapter 
3
 
: Programming with 808
6
 
Microproces
sor
 
 
Compiled by: Er. Hari Aryal             Email: haryal4@gmail.com           
    
                   
Reference:
 
Peter Abel
 
| 
 
4
 
 
-
 
Flag register:
 
The 8086 has 
nine 1 bit 
flags. Out of 9 six are status
 
and three are control flags. The 
control bits in the flag register can be set or reset by the programmer.
 
 
 
 
 
O
O
 
O
D
 
D
I
 
I
T
 
T
S
 
S
Z
 
 
A
A
 
 
P
P
 
 
C
C
 
D
15
 
 
 
 
 
 
 
 
 
 
 
          
D
0
 
 
-
 
O
-
 
Overflow flag
 
This flag 
is set if an arithm
etic overflow occurs, i.e. if the result of a 
signed operation is large enough to be accommodated in a destination register. 
 
-
 
D
-
Direction Flag
 

string is processed beginning fro
m the lowest address to the higher address, i.e. auto 
incrementing mode otherwise the string is processed from the highest address towards 
the lowest address, i.e. autodecrementing mode.
 
-
 
 
I
-
Interrupt flag
 
If this flag is set the maskable interrupts are rec
ognized by the CPU, 
otherwise they are ignored.
 
-
 
T
-
 
Trap flag
 
If this flag is set the processor enters the single step execution mode. In 
other words, a trap interrupt is generated after execution of each instruction. The 
processor executes the current inst
ruction and the control is transferred to the Trap 
interrupt service routine.
 
-
 
S 
-
 
Sign flag:
 
 
This flag is set when the result of any computation is negative. For signed 
computations, the sign flag equals the MSB of the result.
 
-
 
Z
-
 
Zero
 
This flag is set whe
n the result of the computation is or comparison performed 
by the previous instruction is zero.
 
1 for zero result, 0 fir nonzero result
 
-
 
A
-
 
Auxiliary Carry
 
This is set if there is a carry from the lowest nibble, i.e. bit three 
during the addition or borrow 
for the lowest nibble i.e. bit three, during subtraction.
 
-
 
P
-
 
Parity flag
 
This flag is set to 1 if the lower byte of the result contains even number of 
1s otherwise reset.
 
-
 
C
-
Carry flag
 
This flag is set when there is a carry out of MSB in case of addition or
 
a 
borrow in case of subtraction.
 
 
SEGMENT AND OFFSET
 
ADDRESS:
 
-
 
Segments are special areas defined in a program for containing the code, data and stack. 
A segment begins on a paragraph boundary. A segment register is 
of 
16 bits in size and 
contains the star
ting address of a segment.
 
-
 
A segment begins on a paragraph boundary, which is an address 
divisible
 
by decimal 16 
or hex 10. Consider a DS that begins at location 038EOH. In all cases, the rightmost hex 
digit is zero, the computer designers decided that it 
would be unnecessary to store the 
zero the zero digit in the segment register. Thus 038E0H is stores in register as 038EH.
 
-
 
The distance in bytes from the segment address to another location within the segment 
is expressed as an offset or displacement. Supp
ose the offset of 0032H for above 
example of data segment. Processor combines the address of the data segment with the 
offset as:
 
 
Microprocessors  
    
                    
                       
Chapter 
3
 
: Programming with 808
6
 
Microproces
sor
 
 
Compiled by: Er. Hari Aryal             Email: haryal4@gmail.com           
    
                   
Reference:
 
Peter Abel
 
| 
 
5
 
 
-
 
SA: OA
 
(segment address: offset address)
 
038E: 0032 H = 038E * 10 +0032
 
= 038EO + 0032
 
Physical address = 03912H
 
 
Instructions in 8086
 
 
1)
 
Arithmetic Instruction
s
 
 
a)
 
ADD reg
8 
/mem
8 
, reg
8
/mem
8
/ Immediate
8
 
ADD reg
16
/mem
16
 
, 
 
reg
16
/ me
m
16
/ Immediate
16
 
E.g.
 
ADD AH, 15
 
; I
t adds binary number
 
 
ADD AH, NUM
1
 
ADD Al, [BX]
 
 
ADD [BX], CH/CX
 
ADD AX,[BX
]
 
 
b)
 
ADC
: Add
ition
 
with Carry
 
ADC reg/ mem, reg/mem/Immediate data
 
 
c)
 
SUB:
 
Subtract 8 bit or 16 bit binary numbers
 
SUB reg/mem, reg/mem/Immediate
 
 
d)
 
SBB:
 
Subtract with borrow
 
SBB reg/mem, reg/mem/Immediate
 
 
e)
 
MUL
 
:
 
unsigned multiplication
 
MUL reg
8
/mem
8
 
(8 bit accumulator 

 
AL)
 
MUL reg
16
/ mem
16
 
(16 bit accumulator
-
Ax)
 
E
.g. MUL  
R
8
R
8
AL       
 
AX  (16 bit res
ult)
 
 
 
MUL 
 
R
16
 
R
16
AL
      
 
DX:AX 
(32 bit result)
 
IMUL 

 
signed multiplication
 
Same operation as MUL but takes sign into account 
 
 
f)
 
DIV
 
reg/mem
 
E
.
g. DIV R
8
 
 
AX
/R
8
       
 
(Remainder   
AH) & (Q
AL)
 
 
 
DIV R
16
 
 
DX:AX/R
16
 
 
(R
 
DX)   & (Q
A
X
)
 
IDIV
-
 
Signed division
 
Same 
operation as DIV but takes sign
 
into account.
 
 
g)
 
INC/DEC
 
(Increment/Decrement by 1)
 
INC/DEC reg
.
/mem
.
 
(8 bit or 16bit)
 
E
.g. INC A
L        
DEC BX
 
 
 
INC NUM1
 
 
Microprocessors  
    
                    
                       
Chapter 
3
 
: Programming with 808
6
 
Microproces
sor
 
 
Compiled by: Er. Hari Aryal             Email: haryal4@gmail.com           
    
                   
Reference:
 
Peter Abel
 
| 
 
6
 
 
h)
 
NEG
-
 

 
i)
 
ASCII
-
BCD
 
Conversion
 
AAA: ASCII Adjust after addition
 
AAS: ASCII Adjust after subtraction
 
AAM: Adjust after multiplication
 
AAD: Adjust after division
 
DAA: Decimal adjust after addition
 
DAS: Decimal ad
just after subtraction
 
 
2)
 
Logical/shifting
/
comparis
on instructions
 
 
a)
 
Logical 
 
AND/OR/XOR reg/mem, reg/mem/immediate
 
NOT reg/mem
 
E
. 
g
.  
AND AL, AH
 
         
XOR [BX], CL
 
 
b)
 
Rotation
 
ROL
-
 
rotate left,
 
ROR
-
rotate right
 
E.g. 
 
ROL 
AX, 1
 
 
; rotated by 1
 
 
ROL AX
, CL
 
 
; if
 
we need to rotate more than one bit
 
RCL
-
rotate left through carry
 
RCR
-
rotate right through carry
 
E
.
g
.     
 
RCL AX, 1
 
            
RCL AX
, CL
 
 
; O
nly CL can be used
 
 
c)
 
Shifting
 
SHL 
-
logical shift left
 
SHR
 
-
 
logical shift right
 
 
Shifts bit in true direction and
 
fills zero in 
vacant
 
place
 
 
E
.
g. SHL reg/mem, 1/CL
 
 
arithmetic shift left
 
 
SAR
-
 
arithmetic shift right
 
 
Shifts bit/word in true direction, in former case place zero in vacant place and in 
 
later case place previous sign in vacant place.
 
 
E
.
g
. 
 
1
 
011010
 
[
1
 
     
11011010
 
 
 
 
 
 
 
 
 
Microprocessors  
    
                    
                       
Chapter 
3
 
: Programming with 808
6
 
Microproces
sor
 
 
Compiled by: Er. Hari Aryal             Email: haryal4@gmail.com           
    
                   
Reference:
 
Peter Abel
 
| 
 
7
 
 
d)
 
Comparison
 
CMP
 

compare
 
C
MP 
reg/mem, reg/mem/immediate
 
E
.
g.
 
CMP 
BH, AL
 
Operand1
 
 
Operand 2
 
CF
 
SF
 
  
ZF
 
 
 
 
0
 
0
 
0
 
 
 
 
0
 
0
 
1
 
 
 
 
1
 
1
 
0
 
 
 
TEST: test bits (AND operation)
 
 
 
TEST reg/mem, reg/mem/immediate
 
 
3)
 
Data Transfer Instructions:
 
MOV 
reg
.
/m
em
 
, reg
.
/mem
.
/immediate
 
LDS: Load data segment register
 
LEA: load effective address
 
LES: Load extra segment register
 
LSS: Load stack segment register
 
E
.g. LEA BX, ARR   = MOV BX
, OFFSET ARR
 
LDS BX
, NUM1
 
 
 
 
Segment address  
 
DS
 
 
 
 
Offset addre
ss 
 
BX
 
XCHG reg/mem, reg/mem
 
E
.
g
.
 
XCHG AX, BX
 
 
XCHG 
AL, BL
 
 
XCHG CL,[BX]
 
IN AL, DX
 
 
; DX: Port address, AH also in AL
 
OUT DX, AL/AH
 
 
4)
 
Flag Operation
 
CLC: C
lear carry flag
 
CLD: Clear direction flag
 
CLI: C
lear interrupt flag
 
STC: Set C
arry flag
 
ST
D: S
et direction flag
 
STI: Set I
nterrupt flag
 
CMC: Complement C
arry flag
 
LAHF: Load AH from flags (lower byte)
 
SAHF: Store A
H
 
to flags
 
PUSHF: Push flags into stack
 
POPF: Pop flags off stack
 
 
 
 
Microprocessors  
    
                    
                       
Chapter 
3
 
: Programming with 808
6
 
Microproces
sor
 
 
Compiled by: Er. Hari Aryal             Email: haryal4@gmail.com           
    
                   
Reference:
 
Peter Abel
 
| 
 
8
 
 
5)
 
STACK Operations
 
PUSH reg
16
 
POP reg
16
 
 
6)
 
Looping instruction (CX
 
is 
automatically used as a counter)
 
LOOP: loop until complete
 
LOOPE: Loop while equal
 
LOOPZ: loop while zero
 
LOOPNE: loop while not equal
 
LOOPNZ: loop while not zero
 
 
7)
 
Branching instruction
 
a)
 
Conditional
 
JA: Jump if Above
 
JAE: Jump if above/equal
 
JB: Jump if belo
w
 
JBE: Jump if below/equal
 
JC: Jump if carry
 
JNC: Jump if no carry
 
JE: Jump if equal
 
JNE: Jump if no equal
 
JZ: Jump if zero
 
JNZ: Jump if no zero
 
JG: Jump if greater
 
JNG: Jump if no greater 
 
JL: Jump if less
 
JNL: Jump if no less
 
JO: jump if overflow
 
JS: Jum
p if sign
 
JNS: Jump if no sign
 
JP: jump if plus
 
JPE: Jump if parity even
 
JNP: Jump if no parity
 
JPO: Jump if parity odd
 
 
b)
 
Unconditional
 
CALL: call a procedure
 
 
RET: Return
 
INT: Interrupt
 
 
 
IRET: interrupt return
 
JMP: Unconditional Jump
 
RETN
/RETF: Return near
/Far
 
 
8)
 
Type conversion
 
CBW: Convert byte to word
 
CWD: Convert word to double word
 
Microprocessors  
    
                    
                       
Chapter 
3
 
: Programming with 808
6
 
Microproces
sor
 
 
Compiled by: Er. Hari Aryal             Email: haryal4@gmail.com           
    
                   
Reference:
 
Peter Abel
 
| 
 
9
 
 
AX  
 
DX: AX
 
 
9)
 
String instructions
 
a)
 
MOVS/ MOVSB/MOVSW
 
; M
ove string
 
DS: SI source
 
DS: DI destination
 
CX: String length
 
b)
 
CMPS
/ CMPSB/CMP
W 
 
; C
ompare string
 
c)
 
LODS 
/L
ODSB/
LODW 
 
 
; 
Load string
 
d)
 
REP
 
 
 
 
; 
Repeat string
 
 
Operators in 8086
 
-
 
Operator can be applied in the operand which uses the immediate data/address.
 
-
 
Being active during assembling and no machine language code is generated.
 
-
 
Different types of operators are:
 
1)
 
Arithme
tic
: + , 
-
 
,
 
*
 
,
 
 
/
 
2)
 
Logical 
: AND, OR, XOR, NOT
 
3)
 
SHL and SHR
: Shift during assembly
 
4)
 
[ ]
: index
 
5)
 
HIGH
: returns higher byte of an expression
 
6)
 
LOW
: returns lower byte of an expression.
 
E
.g. NUM
 
EQU 1374 H
 
MOV AL HIGH Num
 
 
; ( [AL] 
13 )
 
7)
 
OFFSET
: retur
ns offset address of a variable
 
8)
 
SEG
: returns segment address of a variable
 
9)
 
PTR
: used with type specifications
 
BYTE, WORD, RWORD, DWORD, QWORD
 
E
.
g
. 
INC BYTE PTR [BX]
 
10)
 
Segment override
 
MOV AH, ES: [BX]
 
11)
 
LENGTH
: returns the size of the re
ferred variable
 
12)
 
SIZE:
 
r
eturns length times type
 
E
.
g
.
: 
 
BYTE VAR DB?
 
 
 
WTABLE
 
DW 
10
 
DUP (?)
 
 
 
MOV AX, TYPE BYTEVAR
 
; AX 
= 0001H
 
 
 
MOV AX
, TYPE WTABLE
 
; AX
 
=
 
0002H
 
 
 
MOV CX
, LENGTH WTABLE 
 
; CX = 000A
H
 
 
 
MOV CX, S
IZE WTABLE
 
; CX = 0014H
 
 
 
 
 
 
Microprocessors  
    
                    
                       
Chapter 
3
 
: Programming with 808
6
 
Microproces
sor
 
 
Compiled by: Er. Hari Aryal             Email: haryal4@gmail.com           
    
                   
Reference:
 
Peter Abel
 
| 
 
10
 
 
Coding in As
sembly language:
 
Assembly language programming language has taken its place in between the machine 
language
 
(low level) 
and the high level language.
 
-
 

 
-
 
Low level language consists of 
either binary or hexadecimal operat
ion. One symbolic 
statement
 
generates one machine level instructions.
 
 
Advantage of ALP
 
-
 
They generate
 
small and compact execution module.
 
-
 
They have more control over hardware.
 
-
 
They generate executable module and run faster
.
 
 
Disadvantages of ALP:
 
-
 
Machine dependent
.
 
-
 
Lengthy code
 
-
 
Error prone (likely to generate errors
).
 
 
Assembly language features:
 
The main features of ALP are program comments, reserved words, identifies, statements and 
directives which provid
e the basic rules 
and framework
 
for the language.
 
 
Program comments:
 
-
 
The use of comments through
out a program can improve its clarity.
 
-
 
It starts with semicolon (;) and terminates with a new line.
 
-
 
E
.
g. ADD AX, BX
 
; Adds AX & BX
 
 
Reserved words:
 
-
 
Certain names in assembly langua
ge are reserved for their own purpose to be used only 
under special conditions and 
includes
 
-
 
Instructions : S
uch as MOV and ADD (operations to execute)
 
-
 
Directives: S
uch as END, SEGMENT (information to assembler)
 
-
 
Operators: S
uch as FAR, SIZE
 
-
 
Predefined symbo
ls: such as @DATA, @ MODEL
 
 
Identifiers:
 
-
 
An identifier (
or symbol) is a name that applies to an item in the program that expects 
to reference.
 
-
 
Two types of identifiers are Name and Label.
 
-
 
Name refers to the address of a data item such as NUM1 DB 5, COUNT DB
 
0
 
-
 
Label refers to the address of an instruction
.
 
-
 
E
. 
g: MAIN PROC FAR
 
-
 
L1: ADD BL, 73
 
 
 
